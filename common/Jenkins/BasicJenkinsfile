pipeline {
    // 指定集群中机器 
    agent any

    // 声明全局变量，方便后面使用
    environment {
        harborUser = 'develop'
        harborPasswd = 'Home_12345'
        harborAddress = '192.168.195.160:8092'
        harborRepo = 'repo'
    }

    // 存放所有任务的合集 1
    stages {
        stage('pull git code') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '160ssh', url: 'http://192.168.195.160:8093/root/jframe.git']]])
            }
        }

        stage('maven build') {
            steps {
                sh '''cd Jframe
                /usr/local/apache-maven-3.8.6/bin/mvn clean package -DskipTests'''
            }
        }

        stage('build docker image') {
            steps {
                sh '''cd Jframe
                    cd basic
                    docker build -t ${JOB_NAME}:v1.0.0 .
                    '''
            }
        }

        stage('push image to Harbor') {
            steps {
                sh '''docker login -u ${harborUser} -p ${harborPasswd} ${harborAddress}
                docker tag ${JOB_NAME}:v1.0.0  ${harborAddress}/${harborRepo}/${JOB_NAME}:v1.0.0
                docker push ${harborAddress}/${harborRepo}/${JOB_NAME}:v1.0.0 '''
            }
        }

        stage('transfer to server') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'k8s-master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'k8s', sourceFiles: 'k8s/jframe_basic_pipeline.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }

        stage('notify server to deploy') {
            steps {
                sh 'ssh root@192.168.195.100 kubectl apply -f  /usr/local/jenkins/jframe_basic_pipeline.yaml'
            }
        }
    }
}
